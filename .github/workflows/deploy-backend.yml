name: Deploy Backend to Render

on:
  push:
    branches: [main]
    paths: ['apps/backend/**', 'packages/**', 'scripts/**']
  pull_request:
    branches: [main]
    paths: ['apps/backend/**', 'packages/**', 'scripts/**']

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Lint backend code
        run: yarn workspace backend lint

      - name: Build shared packages
        run: |
          yarn workspace @cvr-bus-tracker/shared-types build
          yarn workspace @cvr-bus-tracker/config build

      - name: Build backend
        run: yarn workspace backend build

      - name: Run backend tests
        run: yarn workspace backend test
        env:
          NODE_ENV: test
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Render
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}

      - name: Wait for deployment
        run: sleep 30

      - name: Test deployment health
        run: |
          # Wait a bit more for service to be fully ready
          sleep 60
          
          # Test health endpoint
          HEALTH_URL="${{ secrets.RENDER_SERVICE_URL }}/api/health"
          echo "Testing health endpoint: $HEALTH_URL"
          
          # Retry logic for health check
          for i in {1..5}; do
            if curl -f --silent --show-error "$HEALTH_URL"; then
              echo "‚úÖ Health check passed on attempt $i"
              break
            else
              echo "‚ö†Ô∏è Health check failed on attempt $i, retrying in 30s..."
              if [ $i -eq 5 ]; then
                echo "‚ùå Health check failed after 5 attempts"
                exit 1
              fi
              sleep 30
            fi
          done

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "üéâ Backend deployment successful!"
          else
            echo "‚ùå Backend deployment failed!"
          fi